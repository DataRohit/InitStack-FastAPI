volumes:
    nginx-data:
        name: nginx-data
        driver: local
    mailpit-data:
        name: mailpit-data
        driver: local
    redis-data:
        name: redis-data
        driver: local
    pgadmin-data:
        name: pgadmin-data
        driver: local
    postgres-data:
        name: postgres-data
        driver: local
    rabbitmq-data:
        name: rabbitmq-data
        driver: local
    mongodb-data:
        name: mongodb-data
        driver: local
    mongodb-config-data:
        name: mongodb-config-data
        driver: local
    dicebear-data:
        name: dicebear-data
        driver: local
    sonarqube_temp:
        name: sonarqube_temp
        driver: local
    sonarqube_data:
        name: sonarqube_data
        driver: local
    sonarqube_logs:
        name: sonarqube_logs
        driver: local
    sonarqube_extensions:
        name: sonarqube_extensions
        driver: local

services:
    nginx-service:
        build:
            context: .
            dockerfile: ./compose/nginx/dockerfile
        image: nginx-service:latest
        container_name: nginx-service
        ports:
            - "8080:8080"
        volumes:
            - nginx-data:/var/lib/nginx
        networks:
            - initstack
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s
        depends_on:
            dicebear-service:
                condition: service_healthy

    backend-service:
        build:
            context: .
            dockerfile: ./compose/backend/dockerfile
        image: backend-service:latest
        container_name: backend-service
        env_file:
            - ./.envs/backend/.env
        volumes:
            - .:/app:z
        networks:
            - initstack
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s
        depends_on:
            mailpit-service:
                condition: service_healthy
            redis-service:
                condition: service_healthy
            postgres-service:
                condition: service_healthy
            mongodb-service:
                condition: service_healthy
            dicebear-service:
                condition: service_healthy

    flower-service:
        build:
            context: .
            dockerfile: ./compose/flower/dockerfile
        image: flower-service:latest
        container_name: flower-service
        command: /app/compose/flower/start
        ports:
            - "5555:5555"
        env_file:
            - ./.envs/backend/.env
            - ./.envs/flower/.env
        volumes:
            - .:/app:z
        networks:
            - initstack
        restart: unless-stopped
        depends_on:
            rabbitmq-service:
                condition: service_healthy
            postgres-service:
                condition: service_healthy

    celery-worker-service:
        build:
            context: .
            dockerfile: ./compose/celery/dockerfile
        image: celery-worker-service:latest
        container_name: celery-worker-service
        env_file:
            - ./.envs/backend/.env
        volumes:
            - .:/app:z
        networks:
            - initstack
        restart: unless-stopped
        depends_on:
            rabbitmq-service:
                condition: service_healthy
            postgres-service:
                condition: service_healthy

    celery-beat-service:
        build:
            context: .
            dockerfile: ./compose/beat/dockerfile
        image: celery-beat-service:latest
        container_name: celery-beat-service
        env_file:
            - ./.envs/backend/.env
        volumes:
            - .:/app:z
        networks:
            - initstack
        restart: unless-stopped
        depends_on:
            rabbitmq-service:
                condition: service_healthy
            postgres-service:
                condition: service_healthy

    cassandra-schema-service:
        build:
            context: .
            dockerfile: ./compose/cassandra-schema/dockerfile
        image: cassandra-schema-service:latest
        container_name: cassandra-schema-service
        entrypoint: ["/wait-and-run.sh"]
        env_file:
            - ./.envs/cassandra-schema/.env
        networks:
            - initstack
        restart: no
        healthcheck:
            test: ["CMD", "true"]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s
        depends_on:
            cassandra-service:
                condition: service_healthy

    cassandra-service:
        image: bitnami/cassandra:latest
        container_name: cassandra-service
        env_file:
            - ./.envs/cassandra/.env
        networks:
            - initstack
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "nodetool", "status"]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s

    mailpit-service:
        image: axllent/mailpit:latest
        container_name: mailpit-service
        ports:
            - "8025:8025"
        networks:
            - initstack
        restart: unless-stopped
        healthcheck:
            test:
                [
                    "CMD",
                    "wget",
                    "--spider",
                    "http://localhost:8025/api/v1/messages",
                ]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s

    redis-service:
        image: redis/redis-stack:latest
        container_name: redis-service
        ports:
            - "8001:8001"
        env_file:
            - ./.envs/redis/.env
        volumes:
            - redis-data:/data
        networks:
            - initstack
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s

    pgadmin-service:
        image: dpage/pgadmin4:latest
        container_name: pgadmin-service
        ports:
            - "5050:80"
        env_file:
            - ./.envs/pgadmin/.env
        volumes:
            - pgadmin-data:/var/lib/pgadmin
        networks:
            - initstack
        restart: unless-stopped
        depends_on:
            postgres-service:
                condition: service_healthy

    postgres-service:
        image: postgres:16-alpine
        container_name: postgres-service
        env_file:
            - ./.envs/postgres/.env
        volumes:
            - postgres-data:/var/lib/postgresql/data
        networks:
            - initstack
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s

    rabbitmq-service:
        image: rabbitmq:management
        container_name: rabbitmq-service
        ports:
            - "15672:15672"
        env_file:
            - ./.envs/rabbitmq/.env
        volumes:
            - rabbitmq-data:/var/lib/rabbitmq
        networks:
            - initstack
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "check_running"]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s

    mongodb-service:
        image: mongo:latest
        container_name: mongodb-service
        ports:
            - "27017:27017"
        env_file:
            - ./.envs/mongodb/.env
        volumes:
            - mongodb-data:/data/db
            - mongodb-config-data:/data/configdb
        networks:
            - initstack
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "mongosh", "--eval", "'db.hello().ok'"]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s

    dicebear-service:
        build:
            context: .
            dockerfile: ./compose/dicebear/dockerfile
        image: dicebear-service:latest
        container_name: dicebear-service
        volumes:
            - dicebear-data:/var/lib/dicebear
        networks:
            - initstack
        restart: unless-stopped
        healthcheck:
            test:
                [
                    "CMD",
                    "curl",
                    "-f",
                    "http://localhost:3000/9.x/avataaars/svg?seed=John%20Doe&accessories[]&eyebrows=default,defaultNatural&eyes=default,happy,squint&mouth=default,smile",
                ]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s

    sonarqube-service:
        image: sonarqube:latest
        container_name: sonarqube-service
        ports:
            - "9000:9000"
        env_file:
            - ./.envs/sonarqube/.env
        volumes:
            - sonarqube_temp:/opt/sonarqube/temp
            - sonarqube_data:/opt/sonarqube/data
            - sonarqube_logs:/opt/sonarqube/logs
            - sonarqube_extensions:/opt/sonarqube/extensions
        networks:
            - initstack
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9000"]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s

networks:
    initstack:
        name: initstack
        driver: bridge
